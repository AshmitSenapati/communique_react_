{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashmit\\\\Desktop\\\\ReactPtractice\\\\communique\\\\src\\\\TranslatorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport useWebSocket from 'react-use-websocket';\n//import { Link } from 'react-router-dom'; // Import Link for navigation\nimport './App.css';\nimport Recorder from './components/Recorder';\nimport AudioFileOpener from './components/AudioFileOpener';\nnp;\nimport { transcribeAudio, translateAndGetSpeech } from './api/api';\n\n// A list of languages for the dropdown\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}, {\n  code: 'ja',\n  name: 'Japanese'\n}, {\n  code: 'it',\n  name: 'Italian'\n}];\nfunction TranslatorPage() {\n  _s();\n  // Renamed from App to TranslatorPage\n  // All of your existing state and functions (handleTranscription, handleTranslate, etc.) go here\n  // ... (pasting all your logic from the second code block)\n  const [transcript, setTranscript] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('es');\n  const handleTranscription = async audioBlob => {\n    // ... your transcription logic ...\n    setIsLoading(true);\n    setError('');\n    setTranscript('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      const transcribedText = await transcribeAudio(audioBlob);\n      setTranscript(transcribedText);\n    } catch (err) {\n      setError('Error during transcription. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleTranslate = async () => {\n    if (!transcript) return;\n    setIsLoading(true);\n    setError('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      const result = await translateAndGetSpeech(transcript, targetLanguage);\n      setTranslatedText(result.translatedText);\n      setAudioUrl(result.audioUrl);\n    } catch (err) {\n      setError('Error during translation. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CommUnique \\uD83C\\uDFA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Record your voice and get it translated into different languages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Recorder, {\n        onStop: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioFileOpener, {\n        onFileSelect: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading\",\n        children: \"Processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Transcript:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\\"\", transcript, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"translation-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: targetLanguage,\n              onChange: e => setTargetLanguage(e.target.value),\n              disabled: isLoading,\n              children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: lang.code,\n                children: lang.name\n              }, lang.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleTranslate,\n              disabled: isLoading,\n              children: \"Translate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), translatedText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Translated Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\\"\", translatedText, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Listen:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            autoPlay: true,\n            src: audioUrl,\n            children: \"Your browser does not support the audio element.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslatorPage, \"TcJzYGBOTlA/cr9nXrsanX/A4YQ=\");\n_c = TranslatorPage;\nexport default TranslatorPage;\nvar _c;\n$RefreshReg$(_c, \"TranslatorPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useWebSocket","Recorder","AudioFileOpener","np","transcribeAudio","translateAndGetSpeech","jsxDEV","_jsxDEV","languages","code","name","TranslatorPage","_s","transcript","setTranscript","translatedText","setTranslatedText","audioUrl","setAudioUrl","isLoading","setIsLoading","error","setError","targetLanguage","setTargetLanguage","handleTranscription","audioBlob","transcribedText","err","console","handleTranslate","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStop","disabled","onFileSelect","value","onChange","e","target","map","lang","onClick","controls","autoPlay","src","_c","$RefreshReg$"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/TranslatorPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport useWebSocket from 'react-use-websocket'\r\n//import { Link } from 'react-router-dom'; // Import Link for navigation\r\nimport './App.css';\r\nimport Recorder from './components/Recorder';\r\nimport AudioFileOpener from './components/AudioFileOpener';np\r\nimport { transcribeAudio, translateAndGetSpeech } from './api/api'\r\n\r\n// A list of languages for the dropdown\r\nconst languages = [\r\n  { code: 'es', name: 'Spanish' },\r\n  { code: 'fr', name: 'French' },\r\n  { code: 'de', name: 'German' },\r\n  { code: 'ja', name: 'Japanese' },\r\n  { code: 'it', name: 'Italian' },\r\n];\r\n\r\nfunction TranslatorPage() { // Renamed from App to TranslatorPage\r\n  // All of your existing state and functions (handleTranscription, handleTranslate, etc.) go here\r\n  // ... (pasting all your logic from the second code block)\r\n  const [transcript, setTranscript] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [audioUrl, setAudioUrl] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [targetLanguage, setTargetLanguage] = useState('es');\r\n\r\n  const handleTranscription = async (audioBlob) => {\r\n    // ... your transcription logic ...\r\n    setIsLoading(true);\r\n    setError('');\r\n    setTranscript('');\r\n    setTranslatedText('');\r\n    setAudioUrl('');\r\n\r\n    try {\r\n      const transcribedText = await transcribeAudio(audioBlob);\r\n      setTranscript(transcribedText);\r\n    } catch (err) {\r\n      setError('Error during transcription. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTranslate = async () => {\r\n    if (!transcript) return;\r\n\r\n    setIsLoading(true);\r\n    setError('');\r\n    setTranslatedText('');\r\n    setAudioUrl('');\r\n\r\n    try {\r\n        const result = await translateAndGetSpeech(transcript, targetLanguage);\r\n        setTranslatedText(result.translatedText);\r\n        setAudioUrl(result.audioUrl);\r\n    } catch (err) {\r\n        setError('Error during translation. Please try again.');\r\n        console.error(err);\r\n    } finally {\r\n        setIsLoading(false);\r\n    }\r\n};\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        \r\n        \r\n        {/* The rest of your existing JSX for the translator */}\r\n        <h1>CommUnique 🎧</h1>\r\n        <p>Record your voice and get it translated into different languages.</p>\r\n        <Recorder onStop={handleTranscription} disabled={isLoading} />\r\n        <AudioFileOpener onFileSelect={handleTranscription} disabled={isLoading} />\r\n\r\n        {isLoading && <p className=\"loading\">Processing...</p>}\r\n        {error && <p className=\"error\">{error}</p>}\r\n\r\n        <div className=\"results\">\r\n          {transcript && (\r\n            <div className=\"result-item\">\r\n              <h3>Transcript:</h3>\r\n              <p>\"{transcript}\"</p>\r\n\r\n              {/* 4. Show the language selector and button ONLY after transcription */}\r\n              <div className=\"translation-controls\">\r\n                <select \r\n                  value={targetLanguage} \r\n                  onChange={(e) => setTargetLanguage(e.target.value)}\r\n                  disabled={isLoading}\r\n                >\r\n                  {languages.map((lang) => (\r\n                    <option key={lang.code} value={lang.code}>\r\n                      {lang.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                <button onClick={handleTranslate} disabled={isLoading}>\r\n                  Translate\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {translatedText && (\r\n            <div className=\"result-item\">\r\n              <h3>Translated Text:</h3>\r\n              <p>\"{translatedText}\"</p>\r\n            </div>\r\n          )}\r\n\r\n          {audioUrl && (\r\n            <div className=\"result-item\">\r\n              <h3>Listen:</h3>\r\n              <audio controls autoPlay src={audioUrl}>\r\n                Your browser does not support the audio element.\r\n              </audio>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* ... and so on for the rest of your JSX ... */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TranslatorPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}