{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashmit\\\\Desktop\\\\ReactPtractice\\\\communique\\\\src\\\\TranslatorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport useWebSocket from 'react-use-websocket';\n\n// It's important to use a secure WebSocket protocol (wss://) in production\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WS_URL = 'ws://127.0.0.1:5000/realtime-transcription';\nfunction TranslatorPage() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const mediaRecorderRef = useRef(null);\n\n  // Set up WebSocket connection\n  const {\n    sendMessage,\n    lastMessage\n  } = useWebSocket(WS_URL, {\n    onOpen: () => console.log('WebSocket connection opened!'),\n    onClose: () => console.log('WebSocket connection closed.'),\n    onMessage: event => {\n      const data = JSON.parse(event.data);\n      if (data.transcript) {\n        // Update the transcript with real-time data from the backend\n        setTranscript(data.transcript);\n      }\n    },\n    // Prevent reconnecting when the component unmounts\n    shouldReconnect: closeEvent => true\n  });\n  const startRecording = async () => {\n    setIsRecording(true);\n    setTranscript('');\n    try {\n      // Request access to the user's microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.ondataavailable = event => {\n        // Send the audio data to the backend via WebSocket\n        if (event.data.size > 0) {\n          sendMessage(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = () => {\n        console.log(\"Recording stopped.\");\n        stream.getTracks().forEach(track => track.stop());\n      };\n      mediaRecorderRef.current.start(250); // Send audio data every 250ms\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setIsRecording(false);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      mediaRecorderRef.current.stop();\n    }\n    setIsRecording(false);\n    // You would typically send a \"stop\" message to the backend here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Voice Translator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRecording ? stopRecording : startRecording,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Live Transcript:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: transcript,\n        readOnly: true,\n        rows: \"10\",\n        style: {\n          width: '80%',\n          padding: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(TranslatorPage, \"Ey4Vr8WMo7uk/kXO/GJUMrdkvR4=\", false, function () {\n  return [useWebSocket];\n});\n_c = TranslatorPage;\nexport default TranslatorPage;\nvar _c;\n$RefreshReg$(_c, \"TranslatorPage\");","map":{"version":3,"names":["React","useState","useRef","useWebSocket","jsxDEV","_jsxDEV","WS_URL","TranslatorPage","_s","isRecording","setIsRecording","transcript","setTranscript","mediaRecorderRef","sendMessage","lastMessage","onOpen","console","log","onClose","onMessage","event","data","JSON","parse","shouldReconnect","closeEvent","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","mimeType","ondataavailable","size","onstop","getTracks","forEach","track","stop","start","error","stopRecording","state","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginTop","value","readOnly","rows","width","_c","$RefreshReg$"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/TranslatorPage.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport useWebSocket from 'react-use-websocket';\r\n\r\n// It's important to use a secure WebSocket protocol (wss://) in production\r\nconst WS_URL = 'ws://127.0.0.1:5000/realtime-transcription';\r\n\r\nfunction TranslatorPage() {\r\n    const [isRecording, setIsRecording] = useState(false);\r\n    const [transcript, setTranscript] = useState('');\r\n    const mediaRecorderRef = useRef(null);\r\n    \r\n    // Set up WebSocket connection\r\n    const { sendMessage, lastMessage } = useWebSocket(WS_URL, {\r\n        onOpen: () => console.log('WebSocket connection opened!'),\r\n        onClose: () => console.log('WebSocket connection closed.'),\r\n        onMessage: (event) => {\r\n            const data = JSON.parse(event.data);\r\n            if (data.transcript) {\r\n                // Update the transcript with real-time data from the backend\r\n                setTranscript(data.transcript);\r\n            }\r\n        },\r\n        // Prevent reconnecting when the component unmounts\r\n        shouldReconnect: (closeEvent) => true,\r\n    });\r\n\r\n    const startRecording = async () => {\r\n        setIsRecording(true);\r\n        setTranscript('');\r\n\r\n        try {\r\n            // Request access to the user's microphone\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            \r\n            mediaRecorderRef.current = new MediaRecorder(stream, { mimeType: 'audio/webm' });\r\n            \r\n            mediaRecorderRef.current.ondataavailable = (event) => {\r\n                // Send the audio data to the backend via WebSocket\r\n                if (event.data.size > 0) {\r\n                    sendMessage(event.data);\r\n                }\r\n            };\r\n\r\n            mediaRecorderRef.current.onstop = () => {\r\n                console.log(\"Recording stopped.\");\r\n                stream.getTracks().forEach(track => track.stop());\r\n            };\r\n\r\n            mediaRecorderRef.current.start(250); // Send audio data every 250ms\r\n        } catch (error) {\r\n            console.error('Error accessing microphone:', error);\r\n            setIsRecording(false);\r\n        }\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\r\n            mediaRecorderRef.current.stop();\r\n        }\r\n        setIsRecording(false);\r\n        // You would typically send a \"stop\" message to the backend here\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: '20px', textAlign: 'center' }}>\r\n            <h2>Voice Translator</h2>\r\n            <button onClick={isRecording ? stopRecording : startRecording}>\r\n                {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n            </button>\r\n            <div style={{ marginTop: '20px' }}>\r\n                <p><strong>Live Transcript:</strong></p>\r\n                <textarea \r\n                    value={transcript}\r\n                    readOnly\r\n                    rows=\"10\"\r\n                    style={{ width: '80%', padding: '10px' }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TranslatorPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}