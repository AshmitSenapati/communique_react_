{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashmit\\\\Desktop\\\\ReactPtractice\\\\communique\\\\src\\\\TranslatorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\n//import { Link } from 'react-router-dom'; // Import Link for navigation\nimport './App.css';\n//import Recorder from './components/Recorder';\nimport AudioFileOpener from './components/AudioFileOpener';\nimport { transcribeAudio, translateAndGetSpeech } from './api/api';\n\n// A list of languages for the dropdown\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}, {\n  code: 'ja',\n  name: 'Japanese'\n}, {\n  code: 'it',\n  name: 'Italian'\n}];\nfunction TranslatorPage() {\n  _s();\n  // Renamed from App to TranslatorPage\n  // All of your existing state and functions (handleTranscription, handleTranslate, etc.) go here\n  // ... (pasting all your logic from the second code block)\n  const [transcript, setTranscript] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('es');\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorder = useRef(null);\n  const audioChunks = useRef([]);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const intervalRef = useRef(null);\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  const handleToggleRecording = () => {\n    if (isRecording) {\n      // Stop the recording\n      mediaRecorder.current.stop();\n      setIsRecording(false);\n      setElapsedTime(0); // Reset elapsed time\n    } else {\n      // Start a new recording\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        mediaRecorder.current = new MediaRecorder(stream);\n        audioChunks.current = []; // Clear previous chunks\n\n        mediaRecorder.current.ondataavailable = event => {\n          audioChunks.current.push(event.data);\n        };\n\n        // When recording stops, process the audio\n        mediaRecorder.current.onstop = () => {\n          const audioBlob = new Blob(audioChunks.current, {\n            type: 'audio/wav'\n          });\n          handleTranscription(audioBlob); // Use your existing transcription handler\n\n          // Stop the microphone track\n          stream.getTracks().forEach(track => track.stop());\n        };\n        mediaRecorder.current.start();\n        setIsRecording(true);\n      }).catch(err => console.error(\"Error accessing microphone:\", err));\n    }\n  };\n  const handleTranscription = async audioBlob => {\n    // ... your transcription logic ...\n    setIsLoading(true);\n    setError('');\n    setTranscript('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      const transcribedText = await transcribeAudio(audioBlob);\n      setTranscript(transcribedText);\n    } catch (err) {\n      setError('Error during transcription. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleTranslate = async () => {\n    if (!transcript) return;\n    setIsLoading(true);\n    setError('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      const result = await translateAndGetSpeech(transcript, targetLanguage);\n      setTranslatedText(result.translatedText);\n      setAudioUrl(result.audioUrl);\n    } catch (err) {\n      setError('Error during translation. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (isRecording) {\n      // Start the timer\n      intervalRef.current = setInterval(() => {\n        setElapsedTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      // Stop and clear the timer\n      clearInterval(intervalRef.current);\n    }\n\n    // Cleanup function to clear the interval when the component unmounts\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [isRecording]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CommUnique \\uD83C\\uDFA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Record your voice and get it translated into different languages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleRecording,\n        disabled: isLoading,\n        className: `record-button ${isRecording ? 'recording' : ''}`,\n        children: isRecording ? 'Stop Recording' : 'Start Recording'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioFileOpener, {\n        onFileSelect: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading\",\n        children: \"Processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Transcript:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\\"\", transcript, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"translation-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: targetLanguage,\n              onChange: e => setTargetLanguage(e.target.value),\n              disabled: isLoading,\n              children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: lang.code,\n                children: lang.name\n              }, lang.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timer\",\n              children: formatTime(elapsedTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleTranslate,\n              disabled: isLoading,\n              children: \"Translate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), translatedText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Translated Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\\"\", translatedText, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Listen:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            autoPlay: true,\n            src: audioUrl,\n            children: \"Your browser does not support the audio element.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslatorPage, \"nAD42UfB2pPkauavAXozc5ZTzkc=\");\n_c = TranslatorPage;\nexport default TranslatorPage;\nvar _c;\n$RefreshReg$(_c, \"TranslatorPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","AudioFileOpener","transcribeAudio","translateAndGetSpeech","jsxDEV","_jsxDEV","languages","code","name","TranslatorPage","_s","transcript","setTranscript","translatedText","setTranslatedText","audioUrl","setAudioUrl","isLoading","setIsLoading","error","setError","targetLanguage","setTargetLanguage","isRecording","setIsRecording","mediaRecorder","audioChunks","elapsedTime","setElapsedTime","intervalRef","formatTime","seconds","minutes","Math","floor","secs","toString","padStart","handleToggleRecording","current","stop","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","handleTranscription","getTracks","forEach","track","start","catch","err","console","transcribedText","handleTranslate","result","setInterval","prevTime","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","onFileSelect","value","onChange","e","target","map","lang","controls","autoPlay","src","_c","$RefreshReg$"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/TranslatorPage.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n//import { Link } from 'react-router-dom'; // Import Link for navigation\r\nimport './App.css';\r\n//import Recorder from './components/Recorder';\r\nimport AudioFileOpener from './components/AudioFileOpener';\r\nimport { transcribeAudio, translateAndGetSpeech } from './api/api'\r\n\r\n// A list of languages for the dropdown\r\nconst languages = [\r\n  { code: 'es', name: 'Spanish' },\r\n  { code: 'fr', name: 'French' },\r\n  { code: 'de', name: 'German' },\r\n  { code: 'ja', name: 'Japanese' },\r\n  { code: 'it', name: 'Italian' },\r\n];\r\n\r\nfunction TranslatorPage() { // Renamed from App to TranslatorPage\r\n  // All of your existing state and functions (handleTranscription, handleTranslate, etc.) go here\r\n  // ... (pasting all your logic from the second code block)\r\n  const [transcript, setTranscript] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [audioUrl, setAudioUrl] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [targetLanguage, setTargetLanguage] = useState('es');\r\n\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const mediaRecorder = useRef(null);\r\n  const audioChunks = useRef([]);\r\n\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const intervalRef = useRef(null);\r\n\r\n  const formatTime = (seconds) => {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const secs = seconds % 60;\r\n  return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n  const handleToggleRecording = () => {\r\n  if (isRecording) {\r\n    // Stop the recording\r\n    mediaRecorder.current.stop();\r\n    setIsRecording(false);\r\n    setElapsedTime(0); // Reset elapsed time\r\n  } else {\r\n    // Start a new recording\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        mediaRecorder.current = new MediaRecorder(stream);\r\n        audioChunks.current = []; // Clear previous chunks\r\n\r\n        mediaRecorder.current.ondataavailable = event => {\r\n          audioChunks.current.push(event.data);\r\n        };\r\n\r\n        // When recording stops, process the audio\r\n        mediaRecorder.current.onstop = () => {\r\n          const audioBlob = new Blob(audioChunks.current, { type: 'audio/wav' });\r\n          handleTranscription(audioBlob); // Use your existing transcription handler\r\n          \r\n          // Stop the microphone track\r\n          stream.getTracks().forEach(track => track.stop());\r\n        };\r\n        \r\n        mediaRecorder.current.start();\r\n        setIsRecording(true);\r\n      })\r\n      .catch(err => console.error(\"Error accessing microphone:\", err));\r\n    }\r\n  };\r\n\r\n  const handleTranscription = async (audioBlob) => {\r\n    // ... your transcription logic ...\r\n    setIsLoading(true);\r\n    setError('');\r\n    setTranscript('');\r\n    setTranslatedText('');\r\n    setAudioUrl('');\r\n\r\n    try {\r\n      const transcribedText = await transcribeAudio(audioBlob);\r\n      setTranscript(transcribedText);\r\n    } catch (err) {\r\n      setError('Error during transcription. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTranslate = async () => {\r\n    if (!transcript) return;\r\n\r\n    setIsLoading(true);\r\n    setError('');\r\n    setTranslatedText('');\r\n    setAudioUrl('');\r\n\r\n    try {\r\n        const result = await translateAndGetSpeech(transcript, targetLanguage);\r\n        setTranslatedText(result.translatedText);\r\n        setAudioUrl(result.audioUrl);\r\n    } catch (err) {\r\n        setError('Error during translation. Please try again.');\r\n        console.error(err);\r\n    } finally {\r\n        setIsLoading(false);\r\n    }\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n  if (isRecording) {\r\n    // Start the timer\r\n    intervalRef.current = setInterval(() => {\r\n      setElapsedTime(prevTime => prevTime + 1);\r\n    }, 1000);\r\n  } else {\r\n    // Stop and clear the timer\r\n    clearInterval(intervalRef.current);\r\n  }\r\n\r\n  // Cleanup function to clear the interval when the component unmounts\r\n  return () => {\r\n    clearInterval(intervalRef.current);\r\n  };\r\n}, [isRecording]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        \r\n        \r\n        {/* The rest of your existing JSX for the translator */}\r\n        <h1>CommUnique 🎧</h1>\r\n        <p>Record your voice and get it translated into different languages.</p>\r\n        <button \r\n        onClick={handleToggleRecording} \r\n        disabled={isLoading}\r\n        className={`record-button ${isRecording ? 'recording' : ''}`}\r\n    >\r\n      {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n      </button>\r\n        <AudioFileOpener onFileSelect={handleTranscription} disabled={isLoading} />\r\n\r\n        {isLoading && <p className=\"loading\">Processing...</p>}\r\n        {error && <p className=\"error\">{error}</p>}\r\n\r\n        <div className=\"results\">\r\n          {transcript && (\r\n            <div className=\"result-item\">\r\n              <h3>Transcript:</h3>\r\n              <p>\"{transcript}\"</p>\r\n\r\n              {/* 4. Show the language selector and button ONLY after transcription */}\r\n              <div className=\"translation-controls\">\r\n                <select \r\n                  value={targetLanguage} \r\n                  onChange={(e) => setTargetLanguage(e.target.value)}\r\n                  disabled={isLoading}\r\n                >\r\n                  {languages.map((lang) => (\r\n                    <option key={lang.code} value={lang.code}>\r\n                      {lang.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                {isRecording && <div className=\"timer\">{formatTime(elapsedTime)}</div>}\r\n                <button onClick={handleTranslate} disabled={isLoading}>\r\n                  Translate\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {translatedText && (\r\n            <div className=\"result-item\">\r\n              <h3>Translated Text:</h3>\r\n              <p>\"{translatedText}\"</p>\r\n            </div>\r\n          )}\r\n\r\n          {audioUrl && (\r\n            <div className=\"result-item\">\r\n              <h3>Listen:</h3>\r\n              <audio controls autoPlay src={audioUrl}>\r\n                Your browser does not support the audio element.\r\n              </audio>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* ... and so on for the rest of your JSX ... */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TranslatorPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}