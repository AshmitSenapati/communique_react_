{"ast":null,"code":"// The base URL of your Flask API\nconst API_URL = \"http://127.0.0.1:5000\";\n\n/**\r\n * Transcribes audio by sending it to the backend.\r\n * @param {Blob} audioBlob The audio data to transcribe.\r\n * @returns {Promise<string>} The transcribed text.\r\n */\nexport const transcribeAudio = async audioBlob => {\n  const formData = new FormData();\n  formData.append(\"file\", audioBlob, \"recording.wav\");\n  const response = await fetch(`${API_URL}/transcribe`, {\n    method: \"POST\",\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to transcribe audio.\");\n  }\n  const data = await response.json();\n  return data.text;\n};\n\n/**\r\n * Translates text and gets the text-to-speech audio URL.\r\n * @param {string} text The text to translate.\r\n * @param {string} targetLanguage The language code (e.g., 'es').\r\n * @returns {Promise<{translatedText: string, audioUrl: string}>}\r\n */\nexport const translateAndGetSpeech = async (text, targetLanguage) => {\n  const formData = new FormData();\n  formData.append(\"text\", text);\n  formData.append(\"lang\", targetLanguage);\n  const response = await fetch(`${API_URL}/translate_tts`, {\n    method: \"POST\",\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to translate or generate audio.\");\n  }\n  const data = await response.json();\n  // We construct the full URL for the audio file\n  return {\n    ...data,\n    audioUrl: `${API_URL}${data.audioUrl}`\n  };\n};","map":{"version":3,"names":["API_URL","transcribeAudio","audioBlob","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","text","translateAndGetSpeech","targetLanguage","audioUrl"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/api/api.js"],"sourcesContent":["// The base URL of your Flask API\r\nconst API_URL = \"http://127.0.0.1:5000\";\r\n\r\n/**\r\n * Transcribes audio by sending it to the backend.\r\n * @param {Blob} audioBlob The audio data to transcribe.\r\n * @returns {Promise<string>} The transcribed text.\r\n */\r\nexport const transcribeAudio = async (audioBlob) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", audioBlob, \"recording.wav\");\r\n\r\n  const response = await fetch(`${API_URL}/transcribe`, {\r\n    method: \"POST\",\r\n    body: formData,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to transcribe audio.\");\r\n  }\r\n\r\n  const data = await response.json();\r\n  return data.text;\r\n};\r\n\r\n/**\r\n * Translates text and gets the text-to-speech audio URL.\r\n * @param {string} text The text to translate.\r\n * @param {string} targetLanguage The language code (e.g., 'es').\r\n * @returns {Promise<{translatedText: string, audioUrl: string}>}\r\n */\r\nexport const translateAndGetSpeech = async (text, targetLanguage) => {\r\n  const formData = new FormData();\r\n  formData.append(\"text\", text);\r\n  formData.append(\"lang\", targetLanguage);\r\n\r\n  const response = await fetch(`${API_URL}/translate_tts`, {\r\n    method: \"POST\",\r\n    body: formData,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to translate or generate audio.\");\r\n  }\r\n  \r\n  const data = await response.json();\r\n  // We construct the full URL for the audio file\r\n  return { ...data, audioUrl: `${API_URL}${data.audioUrl}` };\r\n};"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,uBAAuB;;AAEvC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,SAAS,IAAK;EAClD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,SAAS,EAAE,eAAe,CAAC;EAEnD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,aAAa,EAAE;IACpDQ,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,IAAI;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOD,IAAI,EAAEE,cAAc,KAAK;EACnE,MAAMb,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAES,IAAI,CAAC;EAC7BX,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEW,cAAc,CAAC;EAEvC,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,gBAAgB,EAAE;IACvDQ,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClC;EACA,OAAO;IAAE,GAAGD,IAAI;IAAEK,QAAQ,EAAE,GAAGjB,OAAO,GAAGY,IAAI,CAACK,QAAQ;EAAG,CAAC;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}