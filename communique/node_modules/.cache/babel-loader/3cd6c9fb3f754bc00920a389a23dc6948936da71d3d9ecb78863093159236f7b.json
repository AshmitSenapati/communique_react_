{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashmit\\\\Desktop\\\\ReactPtractice\\\\communique\\\\src\\\\TranslatorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// Assuming these are functions you've defined elsewhere\nimport { transcribeAudio, translateText, textToSpeech } from './api/api';\n\n// Assuming you have a list of languages like this\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}];\nfunction TranslatorPage() {\n  _s();\n  // All your state variables\n  const [transcript, setTranscript] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // Used isLoading instead of setIsLoading in the component\n  const [error, setError] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('es');\n\n  // Your handler function that uses the state setters and API calls\n  const handleTranslate = async () => {\n    setIsLoading(true);\n    setError('');\n    try {\n      // Example usage of your imported functions\n      const translated = await translateText(transcript, targetLanguage);\n      setTranslatedText(translated);\n      const speechUrl = await textToSpeech(translated);\n      setAudioUrl(speechUrl);\n    } catch (err) {\n      setError('Failed to translate. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Translator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: transcript,\n      onChange: e => setTranscript(e.target.value),\n      placeholder: \"Enter text to translate...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: targetLanguage,\n      onChange: e => setTargetLanguage(e.target.value),\n      children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: lang.code,\n        children: lang.name\n      }, lang.code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranslate,\n      disabled: isLoading,\n      children: isLoading ? 'Translating...' : 'Translate'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Translated Text:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: translatedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      src: audioUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslatorPage, \"TcJzYGBOTlA/cr9nXrsanX/A4YQ=\");\n_c = TranslatorPage;\nexport default TranslatorPage;\nvar _c;\n$RefreshReg$(_c, \"TranslatorPage\");","map":{"version":3,"names":["React","useState","transcribeAudio","translateText","textToSpeech","jsxDEV","_jsxDEV","languages","code","name","TranslatorPage","_s","transcript","setTranscript","translatedText","setTranslatedText","audioUrl","setAudioUrl","isLoading","setIsLoading","error","setError","targetLanguage","setTargetLanguage","handleTranslate","translated","speechUrl","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","map","lang","onClick","disabled","controls","src","_c","$RefreshReg$"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/TranslatorPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n// Assuming these are functions you've defined elsewhere\r\nimport { transcribeAudio, translateText, textToSpeech } from './api/api'; \r\n\r\n// Assuming you have a list of languages like this\r\nconst languages = [\r\n  { code: 'es', name: 'Spanish' },\r\n  { code: 'fr', name: 'French' },\r\n  { code: 'de', name: 'German' },\r\n];\r\n\r\nfunction TranslatorPage() {\r\n  // All your state variables\r\n  const [transcript, setTranscript] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [audioUrl, setAudioUrl] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false); // Used isLoading instead of setIsLoading in the component\r\n  const [error, setError] = useState('');\r\n  const [targetLanguage, setTargetLanguage] = useState('es');\r\n\r\n  // Your handler function that uses the state setters and API calls\r\n  const handleTranslate = async () => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    try {\r\n      // Example usage of your imported functions\r\n      const translated = await translateText(transcript, targetLanguage);\r\n      setTranslatedText(translated);\r\n      const speechUrl = await textToSpeech(translated);\r\n      setAudioUrl(speechUrl);\r\n    } catch (err) {\r\n      setError('Failed to translate. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"translator-container\">\r\n      <h1>Translator</h1>\r\n\r\n      {/* Input text area using 'transcript' and 'setTranscript' */}\r\n      <textarea\r\n        value={transcript}\r\n        onChange={(e) => setTranscript(e.target.value)}\r\n        placeholder=\"Enter text to translate...\"\r\n      />\r\n\r\n      {/* Dropdown for language selection */}\r\n      <select\r\n        value={targetLanguage}\r\n        onChange={(e) => setTargetLanguage(e.target.value)}\r\n      >\r\n        {languages.map((lang) => (\r\n          <option key={lang.code} value={lang.code}>\r\n            {lang.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Translate button that calls 'handleTranslate' and is disabled when loading */}\r\n      <button onClick={handleTranslate} disabled={isLoading}>\r\n        {isLoading ? 'Translating...' : 'Translate'}\r\n      </button>\r\n\r\n      {/* Display error message if it exists */}\r\n      {error && <p className=\"error\">{error}</p>}\r\n\r\n      <h2>Translated Text:</h2>\r\n      {/* Display the 'translatedText' */}\r\n      <p>{translatedText}</p>\r\n\r\n      {/* Display the audio player if 'audioUrl' exists */}\r\n      {audioUrl && <audio controls src={audioUrl} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TranslatorPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA,SAASC,eAAe,EAAEC,aAAa,EAAEC,YAAY,QAAQ,WAAW;;AAExE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG,CAChB;EAAEC,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE;AAAU,CAAC,EAC/B;EAAED,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE;AAAS,CAAC,EAC9B;EAAED,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE;AAAS,CAAC,CAC/B;AAED,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnD,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAE1D;EACA,MAAMuB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCL,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,EAAE,CAAC;IACZ,IAAI;MACF;MACA,MAAMI,UAAU,GAAG,MAAMtB,aAAa,CAACS,UAAU,EAAEU,cAAc,CAAC;MAClEP,iBAAiB,CAACU,UAAU,CAAC;MAC7B,MAAMC,SAAS,GAAG,MAAMtB,YAAY,CAACqB,UAAU,CAAC;MAChDR,WAAW,CAACS,SAAS,CAAC;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZN,QAAQ,CAAC,wCAAwC,CAAC;IACpD,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEb,OAAA;IAAKsB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCvB,OAAA;MAAAuB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGnB3B,OAAA;MACE4B,KAAK,EAAEtB,UAAW;MAClBuB,QAAQ,EAAGC,CAAC,IAAKvB,aAAa,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC;IAA4B;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eAGF3B,OAAA;MACE4B,KAAK,EAAEZ,cAAe;MACtBa,QAAQ,EAAGC,CAAC,IAAKb,iBAAiB,CAACa,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAL,QAAA,EAElDtB,SAAS,CAACgC,GAAG,CAAEC,IAAI,iBAClBlC,OAAA;QAAwB4B,KAAK,EAAEM,IAAI,CAAChC,IAAK;QAAAqB,QAAA,EACtCW,IAAI,CAAC/B;MAAI,GADC+B,IAAI,CAAChC,IAAI;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAGT3B,OAAA;MAAQmC,OAAO,EAAEjB,eAAgB;MAACkB,QAAQ,EAAExB,SAAU;MAAAW,QAAA,EACnDX,SAAS,GAAG,gBAAgB,GAAG;IAAW;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EAGRb,KAAK,iBAAId,OAAA;MAAGsB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAET;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1C3B,OAAA;MAAAuB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzB3B,OAAA;MAAAuB,QAAA,EAAIf;IAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGtBjB,QAAQ,iBAAIV,OAAA;MAAOqC,QAAQ;MAACC,GAAG,EAAE5B;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV;AAACtB,EAAA,CAjEQD,cAAc;AAAAmC,EAAA,GAAdnC,cAAc;AAmEvB,eAAeA,cAAc;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}