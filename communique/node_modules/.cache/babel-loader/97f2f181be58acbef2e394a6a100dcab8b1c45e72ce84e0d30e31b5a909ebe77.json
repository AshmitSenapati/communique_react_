{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashmit\\\\Desktop\\\\ReactPtractice\\\\communique\\\\src\\\\TranslatorPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link for navigation\nimport './App.css';\nimport Recorder from './components/Recorder';\nimport AudioFileOpener from './components/AudioFileOpener';\nimport { transcribeAudio, translateText, textToSpeech } from './api/api';\n\n// A list of languages for the dropdown\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}, {\n  code: 'ja',\n  name: 'Japanese'\n}, {\n  code: 'it',\n  name: 'Italian'\n}];\nfunction TranslatorPage() {\n  _s();\n  // Renamed from App to TranslatorPage\n  // All of your existing state and functions (handleTranscription, handleTranslate, etc.) go here\n  // ... (pasting all your logic from the second code block)\n  const [transcript, setTranscript] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('es');\n  const handleTranscription = async audioBlob => {\n    // ... your transcription logic ...\n    setIsLoading(true);\n    setError('');\n    setTranscript('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      const transcribedText = await transcribeAudio(audioBlob);\n      setTranscript(transcribedText);\n    } catch (err) {\n      setError('Error during transcription. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleTranslate = async () => {\n    // ... your translation logic ...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        style: {\n          position: 'absolute',\n          top: '10px',\n          right: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/about\",\n          children: \"About Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CommUnique \\uD83C\\uDFA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Record your voice and get it translated into different languages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Recorder, {\n        onStop: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioFileOpener, {\n        onFileSelect: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslatorPage, \"TcJzYGBOTlA/cr9nXrsanX/A4YQ=\");\n_c = TranslatorPage;\nexport default TranslatorPage;\nvar _c;\n$RefreshReg$(_c, \"TranslatorPage\");","map":{"version":3,"names":["React","useState","Link","Recorder","AudioFileOpener","transcribeAudio","translateText","textToSpeech","jsxDEV","_jsxDEV","languages","code","name","TranslatorPage","_s","transcript","setTranscript","translatedText","setTranslatedText","audioUrl","setAudioUrl","isLoading","setIsLoading","error","setError","targetLanguage","setTargetLanguage","handleTranscription","audioBlob","transcribedText","err","console","handleTranslate","className","children","style","position","top","right","to","fileName","_jsxFileName","lineNumber","columnNumber","onStop","disabled","onFileSelect","_c","$RefreshReg$"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/TranslatorPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom'; // Import Link for navigation\r\nimport './App.css';\r\nimport Recorder from './components/Recorder';\r\nimport AudioFileOpener from './components/AudioFileOpener';\r\nimport { transcribeAudio, translateText, textToSpeech } from './api/api';\r\n\r\n// A list of languages for the dropdown\r\nconst languages = [\r\n  { code: 'es', name: 'Spanish' },\r\n  { code: 'fr', name: 'French' },\r\n  { code: 'de', name: 'German' },\r\n  { code: 'ja', name: 'Japanese' },\r\n  { code: 'it', name: 'Italian' },\r\n];\r\n\r\nfunction TranslatorPage() { // Renamed from App to TranslatorPage\r\n  // All of your existing state and functions (handleTranscription, handleTranslate, etc.) go here\r\n  // ... (pasting all your logic from the second code block)\r\n  const [transcript, setTranscript] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [audioUrl, setAudioUrl] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [targetLanguage, setTargetLanguage] = useState('es');\r\n\r\n  const handleTranscription = async (audioBlob) => {\r\n    // ... your transcription logic ...\r\n    setIsLoading(true);\r\n    setError('');\r\n    setTranscript('');\r\n    setTranslatedText('');\r\n    setAudioUrl('');\r\n\r\n    try {\r\n      const transcribedText = await transcribeAudio(audioBlob);\r\n      setTranscript(transcribedText);\r\n    } catch (err) {\r\n      setError('Error during transcription. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTranslate = async () => {\r\n    // ... your translation logic ...\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* Add a link to your other page */}\r\n        <nav style={{ position: 'absolute', top: '10px', right: '20px' }}>\r\n          <Link to=\"/about\">About Page</Link>\r\n        </nav>\r\n        \r\n        {/* The rest of your existing JSX for the translator */}\r\n        <h1>CommUnique ðŸŽ§</h1>\r\n        <p>Record your voice and get it translated into different languages.</p>\r\n        <Recorder onStop={handleTranscription} disabled={isLoading} />\r\n        <AudioFileOpener onFileSelect={handleTranscription} disabled={isLoading} />\r\n        {/* ... and so on for the rest of your JSX ... */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TranslatorPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}