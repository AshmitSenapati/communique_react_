{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashmit\\\\Desktop\\\\ReactPtractice\\\\communique\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport Recorder from './components/Recorder';\nimport AudioFileOpener from './components/AudioFileOpener';\nimport { transcribeAudio, translateText, textToSpeech } from './api/api';\n\n// A list of languages for the dropdown\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}, {\n  code: 'ja',\n  name: 'Japanese'\n}, {\n  code: 'it',\n  name: 'Italian'\n}];\nfunction App() {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // 1. Add state for the selected language\n  const [targetLanguage, setTargetLanguage] = useState('es'); // Default to Spanish\n\n  // 2. This function now ONLY handles transcription\n  const handleTranscription = async audioBlob => {\n    setIsLoading(true);\n    setError('');\n    setTranscript('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      const transcribedText = await transcribeAudio(audioBlob);\n      setTranscript(transcribedText);\n    } catch (err) {\n      setError('Error during transcription. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 3. This NEW function handles the translation part on button click\n  const handleTranslate = async () => {\n    if (!transcript) return; // Don't do anything if there's no text\n\n    setIsLoading(true);\n    setError('');\n    setTranslatedText('');\n    setAudioUrl('');\n    try {\n      // Step 2: Translate Text using the stored transcript and selected language\n      const translated = await translateText(transcript, targetLanguage);\n      setTranslatedText(translated);\n\n      // Step 3: Convert Translated Text to Speech\n      const finalAudioUrl = await textToSpeech(translated, targetLanguage);\n      setAudioUrl(finalAudioUrl);\n    } catch (err) {\n      setError('Error during translation. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CommUnique \\uD83C\\uDFA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Record your voice and get it translated into different languages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Recorder, {\n        onStop: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioFileOpener, {\n        onFileSelect: handleTranscription,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading\",\n        children: \"Processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results\",\n        children: [transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Transcript:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\\"\", transcript, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"translation-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: targetLanguage,\n              onChange: e => setTargetLanguage(e.target.value),\n              disabled: isLoading,\n              children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: lang.code,\n                children: lang.name\n              }, lang.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleTranslate,\n              disabled: isLoading,\n              children: \"Translate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), translatedText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Translated Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\\"\", translatedText, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Listen:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            autoPlay: true,\n            src: audioUrl,\n            children: \"Your browser does not support the audio element.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TcJzYGBOTlA/cr9nXrsanX/A4YQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Recorder","AudioFileOpener","transcribeAudio","translateText","textToSpeech","jsxDEV","_jsxDEV","languages","code","name","App","_s","transcript","setTranscript","translatedText","setTranslatedText","audioUrl","setAudioUrl","isLoading","setIsLoading","error","setError","targetLanguage","setTargetLanguage","handleTranscription","audioBlob","transcribedText","err","console","handleTranslate","translated","finalAudioUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStop","disabled","onFileSelect","value","onChange","e","target","map","lang","onClick","controls","autoPlay","src","_c","$RefreshReg$"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Recorder from './components/Recorder';\nimport AudioFileOpener from './components/AudioFileOpener';\nimport { transcribeAudio, translateText, textToSpeech } from './api/api';\n\n// A list of languages for the dropdown\nconst languages = [\n  { code: 'es', name: 'Spanish' },\n  { code: 'fr', name: 'French' },\n  { code: 'de', name: 'German' },\n  { code: 'ja', name: 'Japanese' },\n  { code: 'it', name: 'Italian' },\n];\n\nfunction App() {\n  const [transcript, setTranscript] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  // 1. Add state for the selected language\n  const [targetLanguage, setTargetLanguage] = useState('es'); // Default to Spanish\n\n  // 2. This function now ONLY handles transcription\n  const handleTranscription = async (audioBlob) => {\n    setIsLoading(true);\n    setError('');\n    setTranscript('');\n    setTranslatedText('');\n    setAudioUrl('');\n\n    try {\n      const transcribedText = await transcribeAudio(audioBlob);\n      setTranscript(transcribedText);\n    } catch (err) {\n      setError('Error during transcription. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 3. This NEW function handles the translation part on button click\n  const handleTranslate = async () => {\n    if (!transcript) return; // Don't do anything if there's no text\n\n    setIsLoading(true);\n    setError('');\n    setTranslatedText('');\n    setAudioUrl('');\n\n    try {\n      // Step 2: Translate Text using the stored transcript and selected language\n      const translated = await translateText(transcript, targetLanguage);\n      setTranslatedText(translated);\n\n      // Step 3: Convert Translated Text to Speech\n      const finalAudioUrl = await textToSpeech(translated, targetLanguage);\n      setAudioUrl(finalAudioUrl);\n    } catch (err) {\n      setError('Error during translation. Please try again.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CommUnique 🎧</h1>\n        <p>Record your voice and get it translated into different languages.</p>\n        {/* These components now trigger transcription only */}\n        <Recorder onStop={handleTranscription} disabled={isLoading} />\n        <AudioFileOpener onFileSelect={handleTranscription} disabled={isLoading} />\n        {isLoading && <p className=\"loading\">Processing...</p>}\n        {error && <p className=\"error\">{error}</p>}\n        <div className=\"results\">\n          {transcript && (\n            <div className=\"result-item\">\n              <h3>Transcript:</h3>\n              <p>\"{transcript}\"</p>\n              {/* 4. Show the language selector and button ONLY after transcription */}\n              <div className=\"translation-controls\">\n                <select \n                  value={targetLanguage} \n                  onChange={(e) => setTargetLanguage(e.target.value)}\n                  disabled={isLoading}\n                >\n                  {languages.map((lang) => (\n                    <option key={lang.code} value={lang.code}>\n                      {lang.name}\n                    </option>\n                  ))}\n                </select>\n                <button onClick={handleTranslate} disabled={isLoading}>\n                  Translate\n                </button>\n              </div>\n            </div>\n          )}\n          {translatedText && (\n            <div className=\"result-item\">\n              <h3>Translated Text:</h3>\n              <p>\"{translatedText}\"</p>\n            </div>\n          )}\n          {audioUrl && (\n            <div className=\"result-item\">\n              <h3>Listen:</h3>\n              <audio controls autoPlay src={audioUrl}>\n                Your browser does not support the audio element.\n              </audio>\n            </div>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}