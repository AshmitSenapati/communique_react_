{"ast":null,"code":"/**\r\n * SIMULATED: Sends an audio blob for transcription.\r\n * @param {Blob} audioBlob - The audio data to transcribe.\r\n * @returns {Promise<string>} A fake transcribed text.\r\n */\nexport const transcribeAudio = async audioBlob => {\n  console.log('Simulating audio transcription for:', audioBlob);\n  // Simulate a network delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n  // Return a hardcoded successful response\n  return \"This is a test transcription from the recorded audio.\";\n};\n\n/**\r\n * SIMULATED: Sends text for translation.\r\n * @param {string} text - The text to translate.\r\n * @param {string} targetLanguage - The language to translate to.\r\n * @returns {Promise<string>} A fake translated text.\r\n */\nexport const translateText = async (text, targetLanguage) => {\n  console.log(`Simulating translation for: \"${text}\" to language: ${targetLanguage}`);\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return \"Esta es una transcripción de prueba del audio grabado.\";\n};\n\n/**\r\n * SIMULATED: Sends text to be converted to speech.\r\n * @param {string} text - The text to convert.\r\n * @param {string} language - The language of the text.\r\n * @returns {Promise<string>} A URL to a placeholder audio file.\r\n */\nexport const textToSpeech = async (text, language) => {\n  console.log(`Simulating text-to-speech for: \"${text}\" in language: ${language}`);\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  // In a real app, you would get a blob back. For now, we can't easily create a fake audio blob.\n  // This will return an empty string, preventing an error in the audio player.\n  // You can replace this with a URL to any sample mp3 online for testing.\n  // Example: return \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\n  return \"\";\n};","map":{"version":3,"names":["transcribeAudio","audioBlob","console","log","Promise","resolve","setTimeout","translateText","text","targetLanguage","textToSpeech","language"],"sources":["C:/Users/Ashmit/Desktop/ReactPtractice/communique/src/api/api.js"],"sourcesContent":["/**\r\n * SIMULATED: Sends an audio blob for transcription.\r\n * @param {Blob} audioBlob - The audio data to transcribe.\r\n * @returns {Promise<string>} A fake transcribed text.\r\n */\r\nexport const transcribeAudio = async (audioBlob) => {\r\n  console.log('Simulating audio transcription for:', audioBlob);\r\n  // Simulate a network delay\r\n  await new Promise(resolve => setTimeout(resolve, 1500)); \r\n  // Return a hardcoded successful response\r\n  return \"This is a test transcription from the recorded audio.\";\r\n};\r\n\r\n/**\r\n * SIMULATED: Sends text for translation.\r\n * @param {string} text - The text to translate.\r\n * @param {string} targetLanguage - The language to translate to.\r\n * @returns {Promise<string>} A fake translated text.\r\n */\r\nexport const translateText = async (text, targetLanguage) => {\r\n  console.log(`Simulating translation for: \"${text}\" to language: ${targetLanguage}`);\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  return \"Esta es una transcripción de prueba del audio grabado.\";\r\n};\r\n\r\n/**\r\n * SIMULATED: Sends text to be converted to speech.\r\n * @param {string} text - The text to convert.\r\n * @param {string} language - The language of the text.\r\n * @returns {Promise<string>} A URL to a placeholder audio file.\r\n */\r\nexport const textToSpeech = async (text, language) => {\r\n  console.log(`Simulating text-to-speech for: \"${text}\" in language: ${language}`);\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  // In a real app, you would get a blob back. For now, we can't easily create a fake audio blob.\r\n  // This will return an empty string, preventing an error in the audio player.\r\n  // You can replace this with a URL to any sample mp3 online for testing.\r\n  // Example: return \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\r\n  return \"\"; \r\n};\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAG,MAAOC,SAAS,IAAK;EAClDC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,SAAS,CAAC;EAC7D;EACA,MAAM,IAAIG,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACvD;EACA,OAAO,uDAAuD;AAChE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,IAAI,EAAEC,cAAc,KAAK;EAC3DP,OAAO,CAACC,GAAG,CAAC,gCAAgCK,IAAI,kBAAkBC,cAAc,EAAE,CAAC;EACnF,MAAM,IAAIL,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACvD,OAAO,wDAAwD;AACjE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAOF,IAAI,EAAEG,QAAQ,KAAK;EACpDT,OAAO,CAACC,GAAG,CAAC,mCAAmCK,IAAI,kBAAkBG,QAAQ,EAAE,CAAC;EAChF,MAAM,IAAIP,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACvD;EACA;EACA;EACA;EACA,OAAO,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}